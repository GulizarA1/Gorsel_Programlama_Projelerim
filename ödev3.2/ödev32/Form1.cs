using System;
using System.Collections.Generic;
using System.Drawing;
using System.Linq;
using System.Windows.Forms;

namespace Ã¶dev32
{
    public partial class Form1 : Form
    {
        // 5x5 oyun tahtasÄ±; 0 boÅŸluk demek. DiÄŸerleri 1..24
        private int[,] board = new int[5, 5];
        // TaÅŸ numarasÄ±ndan butona eriÅŸmek iÃ§in
        private Dictionary<int, Button> buttons = new Dictionary<int, Button>();
        // BoÅŸluÄŸun konumu
        private int emptyRow = 4, emptyCol = 4;

        private readonly int ROWS = 5;
        private readonly int COLS = 5;

        public Form1()
        {
            InitializeComponent();

            // Pencere boyutlandÄ±rÄ±labilir olacak
            this.FormBorderStyle = FormBorderStyle.Sizable;
            this.MinimumSize = new Size(420, 440); // Ã‡ok kÃ¼Ã§Ã¼lmeyi engelle
            this.DoubleBuffered = true;

            // BaÅŸlangÄ±Ã§ boyutu (keyfi, grid yine uyum saÄŸlar)
            this.ClientSize = new Size(600, 600);

            // Yeniden boyutlanÄ±nca butonlarÄ± yeniden konumlandÄ±r
            this.Resize += (s, e) => LayoutButtons();

            InitBoard();
            CreateButtons();
            ShuffleByLegalMoves(200); // Ã§Ã¶zÃ¼lebilir karÄ±ÅŸÄ±m
            LayoutButtons();
        }

        // 1..24 sÄ±rayla diz, son hÃ¼cre boÅŸ (0)
        private void InitBoard()
        {
            int n = 1;
            for (int r = 0; r < ROWS; r++)
            {
                for (int c = 0; c < COLS; c++)
                {
                    if (r == ROWS - 1 && c == COLS - 1)
                        board[r, c] = 0; // boÅŸluk
                    else
                        board[r, c] = n++;
                }
            }
            emptyRow = ROWS - 1;
            emptyCol = COLS - 1;
        }

        // 1..24 iÃ§in butonlarÄ± bir kez oluÅŸtur (metin ve click olayÄ±)
        private void CreateButtons()
        {
            for (int val = 1; val <= 24; val++)
            {
                var btn = new Button();
                btn.Text = val.ToString();
                btn.Font = new Font("Segoe UI", 14, FontStyle.Bold);
                btn.Tag = val; // hangi taÅŸ olduÄŸu
                btn.Click += Tile_Click;

                // Temel gÃ¶rÃ¼nÃ¼m
                btn.FlatStyle = FlatStyle.Standard;

                buttons[val] = btn;
                this.Controls.Add(btn);
            }
        }

        // GeÃ§erli hamlelerle rastgele karÄ±ÅŸtÄ±r (her adÄ±mda boÅŸluÄŸun komÅŸusu bir taÅŸÄ± boÅŸluÄŸa sÃ¼r)
        private void ShuffleByLegalMoves(int steps)
        {
            var rnd = new Random();
            for (int i = 0; i < steps; i++)
            {
                var neighbors = GetNeighborsOfEmpty();
                var pick = neighbors[rnd.Next(neighbors.Count)];
                // pick: (r,c) konumundaki taÅŸÄ± boÅŸluÄŸa kaydÄ±r
                MoveIfNeighbor(pick.r, pick.c);
            }
        }

        // BoÅŸluÄŸun (up,down,left,right) komÅŸularÄ±
        private List<(int r, int c)> GetNeighborsOfEmpty()
        {
            var list = new List<(int r, int c)>();
            if (emptyRow > 0) list.Add((emptyRow - 1, emptyCol));
            if (emptyRow < ROWS - 1) list.Add((emptyRow + 1, emptyCol));
            if (emptyCol > 0) list.Add((emptyRow, emptyCol - 1));
            if (emptyCol < COLS - 1) list.Add((emptyRow, emptyCol + 1));
            return list;
        }

        // Bir taÅŸa tÄ±klandÄ±ÄŸÄ±nda: boÅŸluÄŸun komÅŸusuysa onu boÅŸluÄŸa kaydÄ±r
        private void Tile_Click(object sender, EventArgs e)
        {
            var btn = (Button)sender;
            int val = (int)btn.Tag;

            // TaÅŸÄ±n board Ã¼zerindeki konumunu bul
            int tr = -1, tc = -1;
            for (int r = 0; r < ROWS; r++)
            {
                for (int c = 0; c < COLS; c++)
                {
                    if (board[r, c] == val)
                    {
                        tr = r; tc = c; break;
                    }
                }
                if (tr != -1) break;
            }

            // KomÅŸuysa hareket ettir
            if (IsNeighborOfEmpty(tr, tc))
            {
                MoveIfNeighbor(tr, tc);
                LayoutButtons();

                if (IsSolved())
                {
                    // KÃ¼Ã§Ã¼k bir Ã¶dÃ¼l :)
                    this.Text = "Tebrikler! Ã‡Ã¶zÃ¼ldÃ¼ ðŸŽ‰";
                }
            }
        }

        private bool IsNeighborOfEmpty(int r, int c)
        {
            return (Math.Abs(r - emptyRow) == 1 && c == emptyCol) ||
                   (Math.Abs(c - emptyCol) == 1 && r == emptyRow);
        }

        // (r,c) taÅŸÄ±nÄ± boÅŸluÄŸa sÃ¼r (komÅŸu olduÄŸundan emin olarak)
        private void MoveIfNeighbor(int r, int c)
        {
            if (!IsNeighborOfEmpty(r, c)) return;

            // TaÅŸ deÄŸeri
            int val = board[r, c];

            // TaÅŸÄ± boÅŸluÄŸa koy
            board[emptyRow, emptyCol] = val;
            board[r, c] = 0;

            // Yeni boÅŸluk
            emptyRow = r;
            emptyCol = c;
        }

        // Pencere boyutuna gÃ¶re tÃ¼m butonlarÄ±n boyut/konumunu hesapla
        private void LayoutButtons()
        {
            // Ä°Ã§ alan boyutlarÄ±
            int W = this.ClientSize.Width;
            int H = this.ClientSize.Height;

            // HÃ¼cre boyutlarÄ± (artÄ±k kare zorunlu deÄŸil!)
            // Aralara biraz boÅŸluk ekleyelim (hÃ¼cre baÅŸÄ±na %2 pay gibi)
            float gapRatio = 0.04f; // toplamda satÄ±r/sÃ¼tunda ~4 aralÄ±k var; ufak pay yeterli
            float cellW = (float)W / COLS;
            float cellH = (float)H / ROWS;

            // Her hÃ¼cre iÃ§inde kÃ¼Ã§Ã¼k bir padding (gÃ¶rÃ¼ntÃ¼ daha ferah)
            int padX = (int)(cellW * gapRatio);
            int padY = (int)(cellH * gapRatio);

            for (int r = 0; r < ROWS; r++)
            {
                for (int c = 0; c < COLS; c++)
                {
                    int val = board[r, c];
                    if (val == 0) continue; // boÅŸluk iÃ§in buton yok

                    var btn = buttons[val];

                    // HÃ¼crenin sol Ã¼st kÃ¶ÅŸesi
                    int x = (int)(c * cellW) + padX;
                    int y = (int)(r * cellH) + padY;

                    // Butonun boyutu (hÃ¼creden paddingleri dÃ¼ÅŸ)
                    int bw = (int)(cellW - 2 * padX);
                    int bh = (int)(cellH - 2 * padY);

                    if (bw < 10) bw = 10; // aÅŸÄ±rÄ± kÃ¼Ã§Ã¼lmeye karÅŸÄ± gÃ¼venlik
                    if (bh < 10) bh = 10;

                    btn.SetBounds(x, y, bw, bh);
                }
            }
        }

        // Ã‡Ã¶zÃ¼lmÃ¼ÅŸ mÃ¼? 1..24 sÄ±rayla ve boÅŸluk saÄŸ altta mÄ±?
        private bool IsSolved()
        {
            int expected = 1;
            for (int r = 0; r < ROWS; r++)
            {
                for (int c = 0; c < COLS; c++)
                {
                    if (r == ROWS - 1 && c == COLS - 1)
                    {
                        return board[r, c] == 0; // son hÃ¼cre boÅŸ olmalÄ±
                    }

                    if (board[r, c] != expected) return false;
                    expected++;
                }
            }
            // Normalde buraya gelmez
            return true;
        }
    }
}
